{"version":3,"sources":["webpack:///./src/app/pages/events/eventtasks/eventtasks.module.ts","webpack:///./src/app/pages/events/eventtasks/eventtasks.page.html","webpack:///./src/app/pages/events/eventtasks/eventtasks.page.scss","webpack:///./src/app/pages/events/eventtasks/eventtasks.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEM;AAEnD,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+DAAc;KAC1B;CACF,CAAC;AAWF;IAAA;IAAmC,CAAC;IAAvB,oBAAoB;QAThC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,+DAAc,CAAC;SAC/B,CAAC;OACW,oBAAoB,CAAG;IAAD,2BAAC;CAAA;AAAH;;;;;;;;;;;;ACzBjC,oIAAoI,YAAY,kuCAAkuC,WAAW,yrBAAyrB,WAAW,yoBAAyoB,WAAW,grC;;;;;;;;;;;ACArtF,+DAA+D,mK;;;;;;;;;;;;;;;;;;;;ACAb;AACoB;AACJ;AACE;AAOpE;IAUE,wBAAoB,GAAqB,EAAU,cAA8B,EAAU,QAAyB;QAAhG,QAAG,GAAH,GAAG,CAAkB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAU,aAAQ,GAAR,QAAQ,CAAiB;IAAI,CAAC;IAEzH,iCAAQ,GAAR;IACA,CAAC;IAEK,yCAAgB,GAAtB;;;;;;6BACK,IAAI,CAAC,UAAU,EAAf,wBAAe;wBAChB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;wBAE5B,IAAI,CAAC,kBAAkB,GAAG,EAAC,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,EAAC,CAAC;wBAEzC,qBAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,EAAE,CAAC;;wBAAjE,QAAQ,GAAG,SAAsD;wBACvE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;wBACpB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;wBACtB,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;wBACpB,WAA0B,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAC;4BAAjB,IAAI;4BACZ,IAAG,CAAC,IAAI,CAAC,IAAI,EAAC;gCACZ,IAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,EAAC;oCAC1C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iCAC3B;qCAAM;oCACL,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iCAC7B;6BACF;iCAAM;gCACL,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;6BAC3B;yBACF;;;;;;KAEJ;IAED,sBAAI,qCAAS;aAAb;YACE,OAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC;QACzB,CAAC;;;OAAA;IAED,sBAAI,sCAAU;aAAd;YACE,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;QACxC,CAAC;;;OAAA;IAED,sBAAI,yCAAa;aAAjB;YACE,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;QACzC,CAAC;;;OAAA;IAED,kCAAS,GAAT;QACE,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;IACvC,CAAC;IArDU,cAAc;QAL1B,+DAAS,CAAC;YACT,QAAQ,EAAE,gBAAgB;YAC1B,qHAAqC;;SAEtC,CAAC;+EAWyB,mFAAgB,EAA0B,+EAAc,EAAoB,iFAAe;OAVzG,cAAc,CAuD1B;IAAD,qBAAC;CAAA;AAvD0B","file":"pages-events-eventtasks-eventtasks-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EventtasksPage } from './eventtasks.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EventtasksPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [EventtasksPage]\n})\nexport class EventtasksPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title *ngIf='isLoggedIn && event != undefined'>Event: {{event.name}}</ion-title>\\n\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"nav.goBack()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div *ngIf=\\\"isLoggedIn\\\">\\n\\n    <ion-button (click)=\\\"nav.navigateForwardParameter('viewevent', event)\\\" expand='block' color='secondary'>\\n      <ion-icon name='calendar'></ion-icon>Zurück zum Event\\n    </ion-button>\\n\\n    <div *ngIf='tasksTODO !== undefined && tasksFUTURE !== undefined && tasksDONE !== undefined'>\\n\\n      <div *ngIf='tasksTODO.length > 0 || tasksFUTURE.length > 0 || tasksDONE.length > 0'>\\n        <ion-card>\\n          <ion-card-header color='light'>\\n            <ion-card-title>Dringende Tasks:</ion-card-title>\\n            <ion-card-subtitle>Diese Task solltest du möglichst bald erledigen!</ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-card-subtitle *ngIf='tasksTODO.length === 0'>---</ion-card-subtitle>\\n            <ion-list *ngFor='let task of tasksTODO'>\\n              <ion-item (click)=\\\"nav.navigateForwardParameter('viewtask', task)\\\" detail *ngIf='!task.done' lines='none'>\\n                {{task.name}}\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      \\n        <ion-card>\\n          <ion-card-header color='light'>\\n            <ion-card-title>Offene Tasks:</ion-card-title>\\n            <ion-card-subtitle>Diese Tasks kannst du jetzt schon erledigen, sind jedoch noch nicht dringend.</ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-card-subtitle *ngIf='tasksFUTURE.length === 0'>---</ion-card-subtitle>\\n            <ion-list *ngFor='let task of tasksFUTURE'>\\n              <ion-item (click)=\\\"nav.navigateForwardParameter('viewtask', task)\\\" detail  lines='none'>\\n                {{task.name}}\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n  \\n        <ion-card>\\n          <ion-card-header color='light'>\\n            <ion-card-title>Erledigte Tasks:</ion-card-title>\\n            <ion-card-subtitle>Diese Tasks sind bereits erledigt.</ion-card-subtitle>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-card-subtitle *ngIf='tasksDONE.length === 0'>---</ion-card-subtitle>\\n            <ion-list *ngFor='let task of tasksDONE'>\\n              <ion-item (click)=\\\"nav.navigateForwardParameter('viewtask', task)\\\" detail  lines='none'>\\n                {{task.name}}\\n              </ion-item>\\n            </ion-list>\\n          </ion-card-content>\\n        </ion-card>\\n      </div>\\n    \\n      <div *ngIf='tasksTODO.length === 0 && tasksFUTURE.length === 0 && tasksDONE.length === 0'>\\n        <ion-card>\\n          <ion-card-header>\\n            <ion-card-title>Dieses Event hat noch keine Tasks</ion-card-title>\\n          </ion-card-header>\\n        </ion-card>\\n      </div>\\n    </div>\\n\\n  </div>\\n  \\n  \\n  <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        Du bist nicht eingeloggt!\\n      </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button (click)=\\\"nav.navigateLogin('tasklist')\\\" expand='block' color='secondary'>\\n        <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\\n<ion-footer *ngIf=\\\"isLoggedIn\\\">\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <div (click)=\\\"nav.navigateForwardParameter('createtask', filterNavParameter)\\\" color='secondary' text-center>\\n      <ion-icon name=\\\"checkmark\\\"></ion-icon><ion-icon name=\\\"add\\\"></ion-icon>Task erstellen\\n    </div>\\n  </ion-toolbar>\\n</ion-footer>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2V2ZW50cy9ldmVudHRhc2tzL2V2ZW50dGFza3MucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { NavigatorService } from 'src/app/services/navigator.service';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { ReminderService } from 'src/app/services/reminder.service';\n\n@Component({\n  selector: 'app-eventtasks',\n  templateUrl: './eventtasks.page.html',\n  styleUrls: ['./eventtasks.page.scss'],\n})\nexport class EventtasksPage implements OnInit {\n\n  event: any;\n\n  tasksTODO: any;\n  tasksFUTURE: any;\n  tasksDONE: any;\n\n  filterNavParameter: any;\n\n  constructor(private nav: NavigatorService, private backendservice: BackendService, private reminder: ReminderService) { }\n\n  ngOnInit() {\n  }\n\n  async ionViewWillEnter(){\n    if(this.isLoggedIn){\n      this.event = this.getParams;\n  \n      this.filterNavParameter = {team: null, event: this.event};\n\n      const allTasks = await this.backendservice.getTasks(this.event._id, '');\n      this.tasksTODO = [];\n      this.tasksFUTURE = [];\n      this.tasksDONE = [];\n      for(const task of allTasks){\n        if(!task.done){\n          if(this.reminder.isActive(this.event, task)){\n            this.tasksTODO.push(task);\n          } else {\n            this.tasksFUTURE.push(task);\n          }\n        } else {\n          this.tasksDONE.push(task);\n        }\n      }\n    }\n  }\n\n  get getParams(){\n    return this.nav.params;\n  }\n\n  get isLoggedIn(){\n    return this.backendservice.isLoggedIn;\n  }\n\n  get isNotLoggedIn(){\n    return !this.backendservice.isLoggedIn;\n  }\n\n  openLogin(){\n    this.nav.navigateLogin('eventtasks');\n  }\n\n}\n"],"sourceRoot":""}