{"version":3,"sources":["webpack:///./src/app/pages/tasks/tasklist/tasklist.module.ts","webpack:///./src/app/pages/tasks/tasklist/tasklist.page.html","webpack:///./src/app/pages/tasks/tasklist/tasklist.page.scss","webpack:///./src/app/pages/tasks/tasklist/tasklist.page.ts"],"names":[],"mappings":"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","file":"pages-tasks-tasklist-tasklist-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TasklistPage } from './tasklist.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TasklistPage\n  },\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [TasklistPage]\n})\nexport class TasklistPageModule {}\n","module.exports = \"<ion-header>\\n<ion-toolbar color=\\\"primary\\\">\\n  <ion-title>Deine Tasks</ion-title>\\n\\n  <ion-buttons slot=\\\"end\\\">\\n    <ion-button (click)=\\\"nav.goBack()\\\">\\n      <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n    </ion-button>\\n  </ion-buttons>\\n</ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div *ngIf=\\\"isLoggedIn\\\">\\n    <ion-card *ngIf='filterByTeam || filterByEvent'>\\n      <ion-card-header color='light'>\\n        <ion-card-title>Taskliste gefiltert nach:</ion-card-title>\\n        <ion-card-subtitle *ngIf='filterByTeam'>Team: {{teamFilter.name}}</ion-card-subtitle>\\n        <ion-card-subtitle *ngIf='filterByEvent'>Event: ???</ion-card-subtitle>\\n      </ion-card-header>\\n    </ion-card>\\n\\n    <div *ngIf='tasksTODO.length > 0 || tasksFUTURE.length > 0'>\\n      <ion-card *ngIf='tasksTODO.length > 0'>\\n        <ion-card-header color='danger'>\\n            <ion-card-title>Dringende Tasks:</ion-card-title>\\n            <ion-card-subtitle>Diese Task solltest du m√∂glichst bald erledigen!</ion-card-subtitle>\\n        </ion-card-header>\\n        <ion-list *ngFor='let task of tasksTODO'>\\n          <ion-item (click)=\\\"nav.navigateForwardParameter('viewtask', task.task)\\\" detail *ngIf='!task.task.done'>\\n            <ion-grid>\\n              <ion-row>\\n                <ion-label color='danger'><h2><ion-icon name=\\\"checkmark\\\" color='danger'></ion-icon> {{task.task.name}}</h2></ion-label>\\n              </ion-row>\\n              <ion-row>\\n                <ion-card-subtitle>{{task.team.name}} &rarr; {{task.event.name}}</ion-card-subtitle>\\n              </ion-row>\\n            </ion-grid>\\n          </ion-item>\\n        </ion-list>\\n      </ion-card>\\n  \\n      <ion-card>\\n        <ion-card-header color='light'>\\n            <ion-card-title>Offene Tasks:</ion-card-title>\\n            <ion-card-subtitle>Diese Tasks kannst du jetzt schon erledigen, sind jedoch noch nicht dringend.</ion-card-subtitle>\\n        </ion-card-header>\\n        <ion-list *ngFor='let task of tasksFUTURE'>\\n          <ion-item (click)=\\\"nav.navigateForwardParameter('viewtask', task.task)\\\" detail>\\n            <ion-grid>\\n              <ion-row>\\n                  <ion-label><h2><ion-icon name=\\\"checkmark\\\"></ion-icon> {{task.task.name}}</h2></ion-label>\\n              </ion-row>\\n              <ion-row>\\n                <ion-card-subtitle>{{task.team.name}} &rarr; {{task.event.name}}</ion-card-subtitle>\\n              </ion-row>\\n            </ion-grid>\\n          </ion-item>\\n        </ion-list>\\n      </ion-card>\\n    </div>\\n\\n    <div *ngIf='tasksTODO.length == 0 && tasksFUTURE.length == 0'>\\n      <ion-card>\\n        <ion-card-header>\\n          <ion-card-title>Du hast aktuell keine anstehenden Tasks</ion-card-title>\\n        </ion-card-header>\\n      </ion-card>\\n    </div>\\n  </div>\\n\\n\\n  <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        Du bist nicht eingeloggt!\\n      </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button (click)=\\\"nav.navigateLogin('tasklist')\\\" expand='block' color='secondary'>\\n        <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\\n<ion-footer *ngIf=\\\"isLoggedIn\\\">\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <div (click)=\\\"nav.navigateForwardParameter('createtask', filterNavParameter)\\\" color='secondary' *ngIf='hasEvents && hasTeams' text-center>\\n      <ion-icon name=\\\"checkmark\\\"></ion-icon><ion-icon name=\\\"add\\\"></ion-icon>Task erstellen\\n    </div>\\n    <div *ngIf='!hasTeams' (click)=\\\"nav.navigateForward('createteam')\\\" color='secondary' text-center>\\n        <ion-icon name=\\\"contacts\\\"></ion-icon><ion-icon name=\\\"add\\\"></ion-icon> Erstelle vorher ein Team\\n    </div>\\n    <div *ngIf='!hasEvents && hasTeams' (click)=\\\"nav.navigateForward('createeventchooser')\\\" color='secondary' text-center>\\n        <ion-icon name=\\\"calendar\\\"></ion-icon><ion-icon name=\\\"add\\\"></ion-icon> Erstelle vorher ein Event\\n    </div>\\n  </ion-toolbar>\\n</ion-footer>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Rhc2tzL3Rhc2tsaXN0L3Rhc2tsaXN0LnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavigatorService } from 'src/app/services/navigator.service';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { ReminderService } from 'src/app/services/reminder.service';\n\n\n@Component({\n  selector: 'app-tasklist',\n  templateUrl: './tasklist.page.html',\n  styleUrls: ['./tasklist.page.scss'],\n})\nexport class TasklistPage implements OnInit {\n\n  filterByEvent: boolean;\n  filterByTeam: boolean;\n  teamFilter: any;\n  filterNavParameter: any;\n\n\n  tasksTODO: any;\n  tasksFUTURE: any;\n  hasEvents: boolean = false;\n  hasTeams: boolean = false;\n\n  constructor(private nav: NavigatorService, private backendService: BackendService, private reminderService: ReminderService) {  }\n\n  ngOnInit() {\n  }\n\n  get getParams(){\n    return this.nav.params;\n  }\n\n  async ionViewWillEnter(){\n    if(this.isLoggedIn){\n      this.tasksTODO = [];\n      this.tasksFUTURE = [];\n      let currentTasks = [];\n      if(this.getParams !== null && this.getParams !== undefined){\n        console.log(\"PARAMS: \", this.getParams);\n        this.teamFilter = this.getParams.team;\n        const filterEvent = this.getParams.event;\n        if(this.getParams.event !== null){\n          console.log(\"EVENT: \", filterEvent);\n          currentTasks = await this.backendService.getTasks(filterEvent._id, '');\n          this.filterByEvent = true;\n          this.filterByTeam = false;\n        } else if(this.getParams.team !== null){\n          console.log(\"TEAM: \", this.teamFilter);\n          currentTasks = await this.backendService.getTasks('', this.teamFilter._id);\n          this.filterByTeam = true;\n          this.filterByEvent = false;\n          this.filterNavParameter = {team: this.teamFilter, event: null}\n        } else {\n          this.filterByTeam = false;\n          this.filterByEvent = false;\n          currentTasks = await this.backendService.getTasks('', '');\n        }\n      } else {\n        this.filterByTeam = false;\n        this.filterByEvent = false;\n        currentTasks = await this.backendService.getTasks('', '');\n      }\n\n      const events = await this.backendService.getEvents('', '', false);\n      this.hasEvents = events.length > 0;\n      const teams = await this.backendService.getTeams('', '', true);\n      this.hasTeams = teams.length > 0;\n\n      for(let task of currentTasks){\n        //console.log(\"TASK: \", task);\n        const eventsss = await this.backendService.getEvents('', task.eventref, false);\n        //console.log(\"EVENTSSS: \", eventsss);\n        if(eventsss.length > 0){\n          const event = eventsss[0];\n          //console.log(\"EVENT: \", event);\n          const teamsss = await this.backendService.getTeams('', task.eventref, true);\n          const team = teamsss[0];\n          if(!task.done){\n            if(this.reminderService.isActive(event, task)){\n              this.tasksTODO.push({task: task, team: team, event: event});\n            } else {\n              this.tasksFUTURE.push({task: task, team: team, event: event});\n            }\n          }\n        }\n      }\n      //console.log(\"TODO Tasks: \", this.tasksTODO);\n      //console.log(\"FUTURE Tasks: \", this.tasksFUTURE);\n    }\n  }\n\n  get isNotLoggedIn(){\n    return !this.backendService.isLoggedIn;\n  }\n\n  get isLoggedIn(){\n    return this.backendService.isLoggedIn;\n  }\n}\n"],"sourceRoot":""}