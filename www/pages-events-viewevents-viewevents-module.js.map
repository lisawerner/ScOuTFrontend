{"version":3,"sources":["webpack:///./src/app/pages/events/viewevents/viewevents.module.ts","webpack:///./src/app/pages/events/viewevents/viewevents.page.html","webpack:///./src/app/pages/events/viewevents/viewevents.page.scss","webpack:///./src/app/pages/events/viewevents/viewevents.page.ts"],"names":[],"mappings":"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","file":"pages-events-viewevents-viewevents-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { VieweventsPage } from './viewevents.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: VieweventsPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [VieweventsPage]\n})\nexport class VieweventsPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title *ngIf='isLoggedIn && event != undefined && team != undefined'>Event: {{event.name}}</ion-title>\\n\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"nav.goBack()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n    <div *ngIf=\\\"isLoggedIn\\\">\\n      <ion-card *ngIf='event != undefined'>\\n        <ion-card-header color='light'>\\n          <ion-card-title>Von: {{event.begindate}} {{event.begintime}} Uhr</ion-card-title>\\n          <ion-card-title>Bis: {{event.enddate}} {{event.endtime}} Uhr</ion-card-title>\\n        </ion-card-header>\\n        <ion-card-content>\\n          <ion-card-subtitle>Beschreibung: {{event.description}}</ion-card-subtitle>\\n\\n\\n          <ion-button (click)=\\\"nav.navigateForwardParameter('viewteam', team)\\\" expand='block' color='secondary' *ngIf='team != undefined'><ion-icon name=\\\"contacts\\\"></ion-icon> {{team.name}}</ion-button>\\n          <ion-button (click)=\\\"nav.navigateForwardParameter('orgateam', event)\\\" expand='block' color='secondary'>Zum Orgateam</ion-button>\\n        </ion-card-content>\\n      </ion-card>\\n    \\n      <ion-card>\\n        <ion-card-header color='light'>\\n            <ion-card-title>Event Tasks:</ion-card-title>\\n        </ion-card-header>\\n        <ion-card-content *ngIf='tasksTODO != undefined'>\\n\\n          <ion-label *ngIf='tasksTODO.length === 0'>\\n            Aktuell gibt es keine dringenden Tasks!\\n          </ion-label>\\n\\n          <div *ngIf='tasksTODO.length > 0'>\\n            <ion-label color='danger'>Dringende Tasks:</ion-label>\\n            <ion-label><p>Diese Task solltest du möglichst bald erledigen!</p></ion-label>\\n            <ion-list *ngFor='let task of tasksTODO'>\\n              <ion-item *ngIf='!task.done' (click)=\\\"nav.navigateForwardParameter('viewtask', task)\\\" detail  lines='none'>\\n                <ion-icon name=\\\"checkmark\\\" color='danger'></ion-icon> {{task.name}}\\n              </ion-item>\\n            </ion-list>\\n          </div>\\n\\n          <div *ngIf='tasksTODO.length === 0 && tasksFUTURE.length > 0'>\\n            <ion-label>Offene Tasks:</ion-label>\\n            <ion-list *ngFor='let task of tasksFUTURE'>\\n              <ion-item *ngIf='!task.done' (click)=\\\"nav.navigateForwardParameter('viewtask', task)\\\" detail  lines='none'>\\n                <ion-icon name=\\\"checkmark\\\"></ion-icon> {{task.name}}\\n              </ion-item>\\n            </ion-list>\\n          </div>\\n          \\n          <ion-button (click)=\\\"nav.navigateForwardParameter('eventtasks', event)\\\" expand='block' color='secondary'>\\n            <ion-icon name='checkmark-circle'></ion-icon>Alle Event Tasks\\n          </ion-button>\\n        </ion-card-content>\\n      </ion-card>\\n\\n      <ion-card>\\n        <ion-card-header color='light'>\\n          <ion-card-title>Erstelle ein Template...</ion-card-title>\\n          <ion-card-subtitle>... welches Struktur und Task wiederverwendbar macht!</ion-card-subtitle>\\n        </ion-card-header>\\n        <ion-card-content>\\n          <!--TODO: Wenn es bereits ein Tempalte für das Event gibt, dann sollte man es nicht mehr erstellen,\\n            sondern höchstens bearbeiten können!\\n            Damit man Prüfen kann, ob es schon ein Template gibt:\\n              Muss irgendeine ID/Referenz zwischen dem Template und seinen Ablegern erstellt werden-->\\n          <form #form=\\\"ngForm\\\" (ngSubmit)=\\\"createTemplate(form)\\\">\\n            \\n            <ion-item>\\n              <ion-label position=\\\"floating\\\">Template-Name:</ion-label>\\n              <ion-input name=\\\"templatename\\\" ngModel required></ion-input>\\n            </ion-item>\\n            <ion-label color=\\\"danger\\\">\\n              <p *ngIf=\\\"templateValidation.invalid\\\">{{templateValidation.message}}</p>\\n            </ion-label>\\n            <ion-label *ngIf=\\\"success\\\">Das Template wurde erfolreich angelegt.</ion-label>\\n            <ion-button type=\\\"submit\\\" expand=\\\"block\\\" color=\\\"secondary\\\">Template erstellen</ion-button>\\n\\n          </form>\\n        </ion-card-content>\\n      </ion-card>\\n    </div>\\n\\n    <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n      <ion-card-header>\\n        <ion-card-title>\\n          Du bist nicht eingeloggt!\\n        </ion-card-title>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-button (click)=\\\"openLogin()\\\" expand='block' color='secondary'>\\n          <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n        </ion-button>\\n      </ion-card-content>\\n    </ion-card>\\n\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2V2ZW50cy92aWV3ZXZlbnRzL3ZpZXdldmVudHMucGFnZS5zY3NzIn0= */\"","import { Component, OnInit } from '@angular/core';\nimport { NavigatorService } from 'src/app/services/navigator.service';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { ReminderService } from 'src/app/services/reminder.service';\n\n@Component({\n  selector: 'app-viewevents',\n  templateUrl: './viewevents.page.html',\n  styleUrls: ['./viewevents.page.scss'],\n})\nexport class VieweventsPage implements OnInit {\n\n  private templateValidation: {invalid: Boolean, message: String};\n  private success: Boolean = false;\n  \n  event: any;\n  team: any;\n  tasksTODO: any;\n  tasksFUTURE: any;\n  tasksDONE: any;\n\n  constructor(private nav:NavigatorService, private backendservice: BackendService, private reminder: ReminderService) {\n    this.templateValidation = {\n      invalid: false,\n      message: \"\"\n    };\n   }\n\n  ngOnInit() {\n  }\n\n  get getParams(){\n    return this.nav.params;\n  }\n\n  async ionViewWillEnter(){\n    if(this.isLoggedIn){\n      //console.log(\"Enter params of event:\", this.getParams)\n      this.event = this.getParams;\n\n      const eventID = this.event._id.toString();\n      const teamssss = await this.backendservice.getTeams('', eventID, true);\n      this.team = teamssss[0];\n\n\n      const allTasks = await this.backendservice.getTasks(eventID, '');\n      this.tasksTODO = [];\n      this.tasksFUTURE = [];\n      this.tasksDONE = [];\n      for(const task of allTasks){\n        if(!task.done){\n          if(this.reminder.isActive(this.event, task)){\n            this.tasksTODO.push(task);\n          } else {\n            this.tasksFUTURE.push(task);\n          }\n        } else {\n          this.tasksDONE.push(task);\n        }\n      }\n    }\n  }\n\n  async changeDone(task){\n    //console.log(\"Change Done to: 'true'\");\n    task.done = true;\n    await this.backendservice.changeTask(task._id, true, task.notice);\n  }\n\n  get isLoggedIn(){\n    return this.backendservice.isLoggedIn;\n  }\n\n  get isNotLoggedIn(){\n    return !this.backendservice.isLoggedIn;\n  }\n\n  openLogin(){\n    this.nav.navigateLogin('eventlist');\n  }\n\n  createTemplate(form){\n    this.templateValidation = {\n      invalid: false,\n      message: \"\"};\n\n    const templatename = form.value.templatename;\n    console.log(templatename);\n    let request = this.backendservice.createTemplate(templatename, this.event._id, this.event.teamref);\n    request.then((ret) => {\n      if(!ret.success){\n        //console.log(\"Database Feedback: \", ret.error);\n        this.templateValidation = {\n          invalid: true,\n          message: ret.error\n        };\n      } else {\n        this.success = true;\n      }\n    }, (err) => {\n      console.error(err);\n    });\n  }\n}\n"],"sourceRoot":""}