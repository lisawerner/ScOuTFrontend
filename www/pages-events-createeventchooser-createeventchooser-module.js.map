{"version":3,"sources":["webpack:///./src/app/pages/events/createeventchooser/createeventchooser.module.ts","webpack:///./src/app/pages/events/createeventchooser/createeventchooser.page.html","webpack:///./src/app/pages/events/createeventchooser/createeventchooser.page.scss","webpack:///./src/app/pages/events/createeventchooser/createeventchooser.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEsB;AAEnE,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,+EAAsB;KAClC;CACF,CAAC;AAWF;IAAA;IAA2C,CAAC;IAA/B,4BAA4B;QATxC,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,+EAAsB,CAAC;SACvC,CAAC;OACW,4BAA4B,CAAG;IAAD,mCAAC;CAAA;AAAH;;;;;;;;;;;;ACzBzC,orCAAorC,wBAAwB,IAAI,eAAe,kf;;;;;;;;;;;ACA/tC,+DAA+D,uL;;;;;;;;;;;;;;;;;;;ACAb;AACoB;AACJ;AAOlE;IAIE,gCAAoB,GAAoB,EAAU,cAA8B;QAA5D,QAAG,GAAH,GAAG,CAAiB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAFhF,cAAS,GAAQ,EAAE,CAAC;IAEgE,CAAC;IAErF,yCAAQ,GAAR;IACA,CAAC;IAEK,iDAAgB,GAAtB;;;;;;wBACE,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;6BACjB,IAAI,CAAC,UAAU,EAAf,wBAAe;wBACD,qBAAM,IAAI,CAAC,cAAc,CAAC,YAAY,CAAC,EAAE,EAAE,EAAE,CAAC;;wBAAvD,MAAM,GAAG,SAA8C;wBACvD,YAAY,GAAI,MAAM,CAAC,IAAI,CAAC;wBAChC,IAAG,YAAY,CAAC,MAAM,KAAK,CAAC,EAAC;4BAC3B,IAAI,CAAC,GAAG,CAAC,eAAe,CAAC,aAAa,CAAC,CAAC;yBACzC;8BAC2B,EAAZ,6BAAY;;;6BAAZ,2BAAY;wBAApB,IAAI;wBACO,qBAAM,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC;;wBAAvE,UAAU,GAAG,SAA0D;wBACvE,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;wBAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,IAAI,EAAC,CAAC;;;wBAHtC,IAAY;;;;;;KAMjC;IAED,sBAAI,8CAAU;aAAd;YACE,OAAO,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;QACxC,CAAC;;;OAAA;IAED,sBAAI,iDAAa;aAAjB;YACE,OAAO,CAAC,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC;QACzC,CAAC;;;OAAA;IAED,0CAAS,GAAT;QACE,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;IACtC,CAAC;IAnCU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,wBAAwB;YAClC,6IAA6C;;SAE9C,CAAC;+EAKwB,mFAAgB,EAA0B,+EAAc;OAJrE,sBAAsB,CAqClC;IAAD,6BAAC;CAAA;AArCkC","file":"pages-events-createeventchooser-createeventchooser-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CreateeventchooserPage } from './createeventchooser.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CreateeventchooserPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CreateeventchooserPage]\n})\nexport class CreateeventchooserPageModule {}\n","module.exports = \"<ion-header>\\n    <ion-toolbar color=\\\"primary\\\">\\n      <ion-title>Event erzeugen</ion-title>\\n  \\n      <ion-buttons slot=\\\"end\\\">\\n        <ion-button (click)=\\\"nav.goBack()\\\">\\n          <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n        </ion-button>\\n      </ion-buttons>\\n    </ion-toolbar>\\n  </ion-header>\\n\\n<ion-content>\\n  <div *ngIf=\\\"isLoggedIn\\\">\\n\\n    <ion-card>\\n      <ion-card-header color='light'>\\n        <ion-card-title>Erstelle ein neues Event:</ion-card-title>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-button (click)=\\\"nav.navigateForward('createevent')\\\" color='secondary' expand='block'>\\n          <ion-icon name=\\\"calendar\\\"></ion-icon><ion-icon name=\\\"add\\\"></ion-icon>Event erstellen\\n        </ion-button>\\n      </ion-card-content>\\n    </ion-card>\\n\\n    <ion-card>\\n      <ion-card-header color='light'>\\n        <ion-card-title>Erstelle ein Event aus den Templates deiner Teams:</ion-card-title>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-list *ngFor='let template of templates'>\\n          <ion-item (click)=\\\"nav.navigateForwardParameter('createevent', template)\\\" detail>{{template.template.name}} ({{template.team}})</ion-item>\\n        </ion-list>\\n      </ion-card-content>\\n    </ion-card>\\n\\n  </div>\\n\\n\\n  <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        Du bist nicht eingeloggt!\\n      </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button (click)=\\\"openLogin()\\\" expand='block' color='secondary'>\\n        <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2V2ZW50cy9jcmVhdGVldmVudGNob29zZXIvY3JlYXRlZXZlbnRjaG9vc2VyLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavigatorService } from 'src/app/services/navigator.service';\nimport { BackendService } from 'src/app/services/backend.service';\n\n@Component({\n  selector: 'app-createeventchooser',\n  templateUrl: './createeventchooser.page.html',\n  styleUrls: ['./createeventchooser.page.scss'],\n})\nexport class CreateeventchooserPage implements OnInit {\n\n  templates: any = [];\n\n  constructor(private nav:NavigatorService, private backendService: BackendService) { }\n\n  ngOnInit() {\n  }\n\n  async ionViewWillEnter(){\n    this.templates = [];\n    if(this.isLoggedIn){\n      const result = await this.backendService.getTemplates('', '');\n      const allTemplates =  result.data;\n        if(allTemplates.length === 0){\n          this.nav.navigateForward('createevent');\n        }\n      for(const temp of allTemplates){\n        const teamSSSSSS = await this.backendService.getTeams(temp.teamref, '', true);\n        const team = teamSSSSSS[0];\n        this.templates.push({template: temp, team: team.name})\n      }\n    }\n  }\n\n  get isLoggedIn(){\n    return this.backendService.isLoggedIn;\n  }\n\n  get isNotLoggedIn(){\n    return !this.backendService.isLoggedIn;\n  }\n\n  openLogin(){\n    this.nav.navigateLogin('eventlist');\n  }\n\n}\n"],"sourceRoot":""}