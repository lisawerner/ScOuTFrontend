{"version":3,"sources":["webpack:///./src/app/pages/help/lexikon/lexikon.module.ts","webpack:///./src/app/pages/help/lexikon/lexikon.page.html","webpack:///./src/app/pages/help/lexikon/lexikon.page.scss","webpack:///./src/app/pages/help/lexikon/lexikon.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEA;AAE7C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,yDAAW;KACvB;CACF,CAAC;AAWF;IAAA;IAAgC,CAAC;IAApB,iBAAiB;QAT7B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,yDAAW,CAAC;SAC5B,CAAC;OACW,iBAAiB,CAAG;IAAD,wBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB9B,uiG;;;;;;;;;;;ACAA,+DAA+D,uJ;;;;;;;;;;;;;;;;;;ACAb;AACoB;AAOtE;IAEE,qBAAoB,GAAqB;QAArB,QAAG,GAAH,GAAG,CAAkB;IAAI,CAAC;IAE9C,8BAAQ,GAAR;IACA,CAAC;IALU,WAAW;QALvB,+DAAS,CAAC;YACT,QAAQ,EAAE,aAAa;YACvB,0GAAkC;;SAEnC,CAAC;+EAGyB,mFAAgB;OAF9B,WAAW,CAOvB;IAAD,kBAAC;CAAA;AAPuB","file":"pages-help-lexikon-lexikon-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LexikonPage } from './lexikon.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LexikonPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [LexikonPage]\n})\nexport class LexikonPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Hilfe: Lexikon (Begriffe)</ion-title>\\n  \\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"nav.goBack()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <ion-card>\\n    <ion-card-header color='light'>\\n      <ion-card-title>Task</ion-card-title>\\n      <ion-card-subtitle>\\n        Ein Task ist eine Aufgabe, Planungsschritt, ToDo, welche du erledigen musst um ein Event zu planen.\\n      </ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-label>\\n        <p>Beispiel: \\\"Einkauf erledigen\\\"</p>\\n        <p>Unerledigte Tasks werden eingteilt in: \\\"dringend\\\" (Reminder ist aktiv) und \\\"offen\\\" (Reminder ist noch inaktiv)</p>\\n      </ion-label>\\n      <ion-card>\\n        <ion-card-header>\\n          <ion-card-title>Reminder</ion-card-title>\\n          <ion-card-subtitle>\\n            Ein Reminder ist eine Erinnerung, ab wann der Task dringend erledigt werden sollte.\\n            Du kannst den Reminder beim Erstellen des Tasks relativ zum Eventbeginn angeben.\\n          </ion-card-subtitle>\\n        </ion-card-header>\\n      </ion-card>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header color='light'>\\n      <ion-card-title>Event</ion-card-title>\\n      <ion-card-subtitle>\\n        Ein Event ist eine Aktion, Veranstaltung oder sonstiger Termin, welches dein Team vorbereitet.\\n        Das Event kann mit Hilfe von Tasks geplant und vorbereitet werden.\\n      </ion-card-subtitle>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-card>\\n        <ion-card-header>\\n          <ion-card-title>Template</ion-card-title>\\n          <ion-card-subtitle>\\n            Aus Events können Templates (Vorlagen) erstellt werden. Um ähnliche Events zu erstellen, kann man diese aus dem Template generieren und sich so die Arbeit sparen alle Tasks wieder einzeln anzulegen.\\n          </ion-card-subtitle>\\n        </ion-card-header>\\n      </ion-card>\\n    </ion-card-content>\\n  </ion-card>\\n\\n  <ion-card>\\n    <ion-card-header color='light'>\\n      <ion-card-title>Team</ion-card-title>\\n      <ion-card-subtitle>\\n        Ein Team ist eine Gruppe, ein Verein oder ein anderer Zusammenschluss von Personen, welches gemeinsam Events plant.\\n      </ion-card-subtitle>\\n    </ion-card-header>\\n  </ion-card>\\n\\n</ion-content>\\n\\n<ion-footer color=\\\"secondary\\\">\\n  <!-- Help-Footer-->\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <ion-buttons>\\n      <ion-button (click)=\\\"nav.navigateForward('starttutorial')\\\">\\n        <ion-icon name=\\\"play-circle\\\"></ion-icon> Tutorial\\n      </ion-button>\\n      <ion-button (click)=\\\"nav.navigateForward('sitemap')\\\">\\n        <ion-icon name=\\\"compass\\\"></ion-icon> Sitemap\\n      </ion-button>\\n      <ion-button (click)=\\\"nav.navigateForward('lexikon')\\\">\\n        <ion-icon name=\\\"book\\\"></ion-icon> Begriffe\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-footer>\\n\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL2hlbHAvbGV4aWtvbi9sZXhpa29uLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavigatorService } from 'src/app/services/navigator.service';\n\n@Component({\n  selector: 'app-lexikon',\n  templateUrl: './lexikon.page.html',\n  styleUrls: ['./lexikon.page.scss'],\n})\nexport class LexikonPage implements OnInit {\n\n  constructor(private nav: NavigatorService) { }\n\n  ngOnInit() {\n  }\n\n}\n"],"sourceRoot":""}