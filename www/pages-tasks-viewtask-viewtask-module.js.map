{"version":3,"sources":["webpack:///./src/app/pages/tasks/viewtask/viewtask.module.ts","webpack:///./src/app/pages/tasks/viewtask/viewtask.page.html","webpack:///./src/app/pages/tasks/viewtask/viewtask.page.scss","webpack:///./src/app/pages/tasks/viewtask/viewtask.page.ts"],"names":[],"mappings":"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","file":"pages-tasks-viewtask-viewtask-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ViewtaskPage } from './viewtask.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ViewtaskPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [ViewtaskPage]\n})\nexport class ViewtaskPageModule {}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title *ngIf='isLoggedIn && task != undefined'>Task: {{task.name}}</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"nav.goBack()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n  <div *ngIf='isLoggedIn && task != undefined'>\\n    <ion-card>\\n      <ion-card-header color='light'>\\n        <ion-card-title background-color='light'>Erledigungsstatus:</ion-card-title>\\n        \\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-item>\\n          <ion-label *ngIf='task.done'>Erledigt</ion-label>\\n          <ion-label *ngIf='!task.done'>Unerledigt</ion-label>\\n          <ion-toggle [(ngModel)]=\\\"toggleDoneValue\\\" (ionChange)='changeDone()' checked=\\\"{{task.done == true}}\\\"></ion-toggle>\\n          <ion-card-subtitle *ngIf='statusChanged' color='danger'>{{statusChangedMessage}}</ion-card-subtitle>\\n        </ion-item>\\n        <ion-label *ngIf='!active && !task.done'>\\n          <h2>Reminder: startet ca. {{reminderToString}} vor dem Eventbegin</h2>\\n        </ion-label>\\n        <ion-label *ngIf='active && !task.done' color=\\\"danger\\\">\\n          <h2>Reminder: Du solltest das jetzt erledigen!</h2>\\n        </ion-label>\\n        <ion-label *ngIf='task.done'>\\n          <h2>Reminder: Dieser Task ist bereits erledigt!</h2>\\n        </ion-label>\\n      </ion-card-content>\\n    </ion-card>\\n    \\n    <ion-card *ngIf='myTeam !== undefined && myEvent !== undefined'>\\n      <ion-card-header color='light'>\\n        <ion-card-title>Infos zu dem Task:</ion-card-title>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <ion-item>\\n          <ion-label text-wrap>\\n            <h2>Beschreibung:</h2>\\n            <p>{{task.description}}</p>\\n            <p *ngIf='task.description == \\\"\\\"'> ---</p>     \\n          </ion-label>\\n        </ion-item>\\n        <ion-item (click)=\\\"nav.navigateForwardParameter('viewteam', myTeam)\\\" detail>\\n          Team: {{myTeam.name}}\\n        </ion-item>\\n        <ion-item (click)=\\\"nav.navigateForwardParameter('viewevent', myEvent)\\\" detail>\\n          <ion-label>\\n            <h2>Event: {{myEvent.name}}</h2>\\n            <p>startet am {{myEvent.begindate}}</p>\\n          </ion-label>\\n        </ion-item>\\n      </ion-card-content>\\n    </ion-card>\\n    \\n    <ion-card>\\n      <ion-card-header color='light'>\\n        <ion-card-title>Notizfeld:</ion-card-title>\\n      </ion-card-header>\\n      <ion-card-content>\\n        <form #form=\\\"ngForm\\\" (ngSubmit)=\\\"changeTask(form)\\\">\\n          <ion-textarea name=\\\"noticefield\\\" [(ngModel)]=\\\"task.notice\\\">\\n            \\n          </ion-textarea>\\n          <ion-label color='danger' *ngIf='saveNotes'>Deine Notizen wurden gespeichert!</ion-label>\\n          <ion-button type=\\\"submit\\\" expand=\\\"block\\\" color=\\\"secondary\\\">Notizen Speichern</ion-button>\\n        </form>\\n      </ion-card-content>\\n    </ion-card>\\n  </div>\\n  \\n  <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        Du bist nicht eingeloggt!\\n      </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button (click)=\\\"openLogin()\\\" expand='block' color='secondary'>\\n        <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n\\n</ion-content>\\n<!--\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"nav.navigateForwardParameter('viewteam', myTeam)\\\"><ion-icon slot=\\\"icon-only\\\" name=\\\"contacts\\\"></ion-icon></ion-button>\\n      <ion-button (click)=\\\"nav.navigateForwardParameter('viewevent', myEvent)\\\"><ion-icon slot=\\\"icon-only\\\" name=\\\"calendar\\\"></ion-icon></ion-button>\\n      <ion-button (click)=\\\"showConfirmAlert()\\\"><ion-icon slot=\\\"icon-only\\\" name=\\\"trash\\\"></ion-icon></ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n-->\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Rhc2tzL3ZpZXd0YXNrL3ZpZXd0YXNrLnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { NavigatorService } from 'src/app/services/navigator.service';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { ReminderService } from 'src/app/services/reminder.service';\n\n@Component({\n  selector: 'app-viewtask',\n  templateUrl: './viewtask.page.html',\n  styleUrls: ['./viewtask.page.scss'],\n})\nexport class ViewtaskPage implements OnInit {\n\n  task: any;\n  toggleDoneValue: boolean;\n  myEvent: any;\n  myTeam: any;\n  active: boolean;\n  reminderToString: string = '';\n  statusChanged: boolean = false;\n  statusChangedMessage: String = '';\n  saveNotes: boolean = false;\n\n  constructor(private atrCtrl: AlertController, private nav: NavigatorService, private backendService: BackendService,\n    private reminderservice: ReminderService) { }\n\n  get getParams(){\n    return this.nav.params;\n  }\n\n  async ionViewWillEnter(){\n    if(this.isLoggedIn){\n      this.statusChanged = false;\n      this.saveNotes = false;\n\n      this.task = this.getParams;\n      this.toggleDoneValue = this.task.done;\n      const e = await this.backendService.getEvents('', this.task.eventref, true);\n      this.myEvent = e[0];\n      const t = await this.backendService.getTeams('', this.task.eventref, true);\n      this.myTeam = t[0];\n      this.active = this.reminderservice.isActive(this.myEvent, this.task);\n      this.reminderToString = '';\n      if(this.task.distancemonths > 0){\n        if(this.task.distancemonths === 1){\n          this.reminderToString = ' einen ' + this.task.distancemonths + ' Monat';\n        } else {\n          this.reminderToString = '' + this.task.distancemonths + ' Monaten';\n        }\n      } else if(this.task.distanceweeks > 0){\n        if(this.task.distanceweeks === 1){\n          this.reminderToString = ' eine ' + this.task.distanceweeks + ' Woche';\n        } else {\n          this.reminderToString = '' + this.task.distanceweeks + ' Wochen';\n        }\n      } else {\n        if(this.task.distancedays === 1){\n          this.reminderToString = ' einen ' + this.task.distancedays + ' Tag';\n        } else {\n          this.reminderToString = '' + this.task.distancedays + ' Tagen';\n        }\n      }\n    }\n  }\n\n  get isNotLoggedIn(){\n    return !this.backendService.isLoggedIn;\n  }\n\n  get isLoggedIn(){\n    return this.backendService.isLoggedIn;\n  }\n\n  openLogin(){\n    this.nav.navigateLogin('tasklist');\n  }\n\n  ngOnInit() {\n  }\n\n  async changeDone(){\n    //console.log(\"Change Done to: \", this.toggleDoneValue);\n    await this.backendService.changeTask(this.task._id, this.toggleDoneValue, this.task.notice);\n    this.task.done = this.toggleDoneValue;\n    this.statusChanged = true;\n    if(this.task.done){\n      this.statusChangedMessage = 'Der Task wurde jetzt als \"erledigt\" gespeichert.';\n    } else {\n      this.statusChangedMessage = 'Der Task wurde gerade als \"unerledigt\" gespeichert!'\n    }\n  }\n  \n  async changeTask(form){\n    const notice = form.value.noticefield;\n    //console.log('Change notice to: ', notice);\n    await this.backendService.changeTask(this.task._id, this.task.done, notice);\n    this.task.notice = notice;\n    this.saveNotes = true;\n  }\n\n  async showConfirmAlert(){\n    let alertConfirm = await this.atrCtrl.create({\n      header: 'ToDo löschen',\n      message: 'Bist du sicher, dass du diese Aufgabe löschen willst?',\n      buttons: [\n        {\n          text: 'Nein',\n          role: 'cancel',\n          handler: () => {\n            console.log('No clicked');\n          }\n        },\n        {\n          text: 'Ja',\n          handler: () => {\n            console.log('Yes clicked');\n            //TODO: Delete Task in database!\n            this.nav.navigateTasklist();\n          }\n        }\n      ]\n    });\n    await alertConfirm.present();\n  }\n}\n"],"sourceRoot":""}