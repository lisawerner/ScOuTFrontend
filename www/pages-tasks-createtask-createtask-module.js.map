{"version":3,"sources":["webpack:///./src/app/pages/tasks/createtask/createtask.module.ts","webpack:///./src/app/pages/tasks/createtask/createtask.page.html","webpack:///./src/app/pages/tasks/createtask/createtask.page.scss","webpack:///./src/app/pages/tasks/createtask/createtask.page.ts"],"names":[],"mappings":"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","file":"pages-tasks-createtask-createtask-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CreatetaskPage } from './createtask.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CreatetaskPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [CreatetaskPage]\n})\nexport class CreatetaskPageModule {\n}\n","module.exports = \"<ion-header>\\n  <ion-toolbar color=\\\"primary\\\">\\n    <ion-title>Task erzeugen:</ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"nav.goBack()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content>\\n\\n  <div *ngIf=\\\"isLoggedIn\\\">\\n    <form #form=\\\"ngForm\\\" (ngSubmit)=\\\"saveNewTask(form)\\\">\\n      <ion-card>\\n        <ion-card-header color='light'>\\n          <ion-card-title>Notwendige Angaben:</ion-card-title>\\n        </ion-card-header>\\n    \\n        <ion-card-content>\\n\\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Task-Name:</ion-label>\\n            <ion-input name=\\\"taskname\\\" ngModel></ion-input>\\n          </ion-item>\\n      \\n          <ion-item>\\n            <ion-label>Team:</ion-label>\\n            <ion-select *ngIf='choosedTeam === null' name=\\\"teamID\\\" ngModel placeholder=\\\"Wähle\\\" (ionChange)='rememberTeam(form.value.teamID)'>\\n              <ion-select-option *ngFor=\\\"let team of teams\\\" value='{{team._id}}'>{{team.name}}</ion-select-option>\\n            </ion-select>\\n            <ion-label *ngIf='choosedTeam !== null'>{{choosedTeam.name}}</ion-label>\\n          </ion-item>\\n      \\n          <ion-item [disabled]=\\\"teamevents == null\\\">\\n            <ion-label>Event:</ion-label>\\n            <ion-select *ngIf='choosedEvent === null' name=\\\"eventID\\\" ngModel placeholder=\\\"Wähle\\\" >\\n              <ion-select-option *ngFor=\\\"let event of teamevents\\\" value=\\\"{{event._id}}\\\">{{event.name}}</ion-select-option>\\n            </ion-select>\\n            <ion-label *ngIf='choosedEvent !== null'>{{choosedEvent.name}}</ion-label>\\n          </ion-item>\\n      \\n\\n          <ion-card>\\n            <ion-card-header>\\n              <ion-card-title *ngIf=\\\"validation.invalid\\\" color=\\\"danger\\\">Reminder:</ion-card-title>\\n              <ion-card-title *ngIf=\\\"!validation.invalid\\\">Reminder:</ion-card-title>\\n              <ion-card-subtitle>Wie lange vor dem Event soll dieser Task den Status \\\"dringend erledigen\\\" bekommen, sodass du stärker von der App daran erinnerst wirst ihn zu erledigen:</ion-card-subtitle>\\n            </ion-card-header>\\n    \\n            <ion-card-content>\\n              <ion-item>\\n                <ion-label>Tage:</ion-label>\\n                <ion-input type=\\\"number\\\" name=\\\"dayreminder\\\" ngModel></ion-input>\\n              </ion-item>\\n              <ion-item>\\n                <ion-label>Wochen:</ion-label>\\n                <ion-input type=\\\"number\\\" name=\\\"weekreminder\\\" ngModel></ion-input>\\n              </ion-item>\\n              <ion-item>\\n                <ion-label>Monate:</ion-label>\\n                <ion-input type=\\\"number\\\" name=\\\"monthreminder\\\" ngModel></ion-input>\\n              </ion-item>\\n            </ion-card-content>\\n          </ion-card>\\n          \\n          <ion-item>\\n            <ion-label position=\\\"floating\\\">Task Beschreibung (optional):</ion-label>\\n            <ion-textarea name=\\\"description\\\" ngModel ></ion-textarea>\\n          </ion-item>\\n\\n          <ion-label color=\\\"danger\\\">\\n            <p *ngIf=\\\"validation.invalid\\\">{{validation.message}}</p>\\n          </ion-label>\\n          <ion-button type=\\\"submit\\\" expand=\\\"block\\\" color=\\\"secondary\\\">Speichern</ion-button>\\n        </ion-card-content>\\n    \\n      </ion-card>\\n    </form>\\n  </div>\\n\\n  <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        Du bist nicht eingeloggt!\\n      </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button (click)=\\\"openLogin()\\\" expand='block' color='secondary'>\\n        <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3Rhc2tzL2NyZWF0ZXRhc2svY3JlYXRldGFzay5wYWdlLnNjc3MifQ== */\"","import { Component, OnInit } from '@angular/core';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { NavigatorService } from 'src/app/services/navigator.service';\n\n@Component({\n  selector: 'app-createtask',\n  templateUrl: './createtask.page.html',\n  styleUrls: ['./createtask.page.scss'],\n})\nexport class CreatetaskPage implements OnInit {\n\n  teams: any = [];\n  team: any;\n  teamevents: any;\n  validation: {invalid: Boolean, message: String};\n\n  choosedTeam: any;\n  choosedEvent: any;\n\n  constructor(private nav: NavigatorService, public backendService: BackendService) {}\n\n  get getParams(){\n    return this.nav.params;\n  }\n\n  async ionViewWillEnter(){\n    this.validation = {\n      invalid: false,\n      message: \"\"\n    };\n\n    if(this.isLoggedIn){\n      this.choosedTeam = null;\n      this.choosedEvent = null;\n\n      if(this.getParams === null || this.getParams === undefined){\n        this.teams = await this.backendService.getTeams('', '', true);\n        this.team = null;\n        this.teamevents = null;\n      } else {\n        if(this.getParams.team !== null){\n          this.choosedTeam = this.getParams.team;\n          this.rememberTeam(this.choosedTeam._id);\n        } else if(this.getParams.event !== null){\n          this.choosedEvent = this.getParams.event;\n          this.teamevents = this.choosedEvent;\n          const teamssss = await this.backendService.getTeams(this.choosedEvent.teamref, '', true);\n          this.choosedTeam = teamssss[0];\n        }\n      }\n    }\n  }\n\n  ngOnInit() {\n  }\n\n  get isLoggedIn(){\n    return this.backendService.isLoggedIn;\n  }\n\n  get isNotLoggedIn(){\n    return !this.backendService.isLoggedIn;\n  }\n\n  openLogin(){\n    this.nav.navigateLogin('tasklist');\n  }\n\n  async rememberTeam(teamID){\n    this.team = teamID;\n    console.log(this.team);\n    this.teamevents = await this.backendService.getEvents(this.team, '', false);\n    console.log(\"Get Events: \", this.teamevents);\n  }\n\n  async saveNewTask(form){\n    this.validation = {\n      invalid: false,\n      message: \"\"};\n    const result = form.value;\n\n    //Check Name!\n    if(result.taskname === ''){\n      this.validation = {\n        invalid: true,\n        message: \"Du musst einen Namen für den Task angeben!\"\n      };\n      return;\n    }\n\n    //Check Team\n    let teamID = result.teamID;\n    if(this.choosedTeam !== null){\n      teamID = this.choosedTeam._id;\n    }\n    if(teamID === ''){\n      this.validation = {\n        invalid: true,\n        message: \"Du musst ein Team (und danach ein Event) auswählen!\"\n      };\n      return;\n    }\n    \n    //Check Event\n    let eventID = result.eventID;\n    if(this.choosedEvent !== null){\n      eventID = this.choosedEvent._id;\n    }\n    if(eventID === ''){\n      this.validation = {\n        invalid: true,\n        message: \"Du musst ein Event auswählen!\"\n      };\n      return;\n    }\n\n    //Check Reminder\n    if(result.dayreminder === null){\n      result.dayreminder = '';\n    }\n    if(result.weekreminder === null){\n      result.weekreminder = '';\n    }\n    if(result.monthreminder === null){\n      result.monthreminder = '';\n    }\n    const sum = result.dayreminder + result.weekreminder + result.monthreminder;\n    if(sum <= 0){\n      this.validation = {\n        invalid: true,\n        message: \"Die Summe vom Reminder muss > 0\"\n      };\n      return;\n    }\n\n    let request = this.backendService.createTask(result.taskname, teamID, eventID, result.description,\n      result.dayreminder, result.weekreminder, result.monthreminder);\n      request.then((ret) => {\n        if(!ret.success){\n          //console.log(\"Database Feedback: \", ret.error);\n          this.validation = {\n            invalid: true,\n            message: ret.error};\n        } else {\n          this.nav.navigateForwardParameter('viewtask', ret.data);\n        }\n      }, (err) => {\n        console.error(err);\n      });\n  }\n\n}\n"],"sourceRoot":""}