{"version":3,"sources":["webpack:///./src/app/pages/teams/teamlist/teamlist.module.ts","webpack:///./src/app/pages/teams/teamlist/teamlist.page.html","webpack:///./src/app/pages/teams/teamlist/teamlist.page.scss","webpack:///./src/app/pages/teams/teamlist/teamlist.page.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAyC;AACM;AACF;AACU;AAEV;AAEE;AAE/C,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,2DAAY;KACxB;CACF,CAAC;AAWF;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAT9B,8DAAQ,CAAC;YACR,OAAO,EAAE;gBACP,4DAAY;gBACZ,0DAAW;gBACX,0DAAW;gBACX,4DAAY,CAAC,QAAQ,CAAC,MAAM,CAAC;aAC9B;YACD,YAAY,EAAE,CAAC,2DAAY,CAAC;SAC7B,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;;;;;ACzB/B,41CAA41C,cAAc,4WAA4W,gBAAgB,4CAA4C,aAAa,sIAAsI,gBAAgB,k5C;;;;;;;;;;;ACAr7D,+DAA+D,2J;;;;;;;;;;;;;;;;;;;;ACAb;AACoB;AACJ;AACE;AAOpE;IAKE,sBAAoB,GAAqB,EAAU,IAAoB,EAAU,QAAyB;QAAtF,QAAG,GAAH,GAAG,CAAkB;QAAU,SAAI,GAAJ,IAAI,CAAgB;QAAU,aAAQ,GAAR,QAAQ,CAAiB;QAH1G,UAAK,GAAQ,EAAE,CAAC;QAChB,oBAAe,GAAQ,EAAE,CAAC;IAEmF,CAAC;IAExG,+BAAQ,GAAd;;;;;;KACC;IAEK,uCAAgB,GAAtB;;;;;;6BACK,IAAI,CAAC,UAAU,EAAf,yBAAe;wBACE,qBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,IAAI,CAAC;;wBAAlD,SAAS,GAAG,SAAsC;wBACpD,aAAa,GAAG,EAAE,CAAC;8BACD,EAAT,uBAAS;;;6BAAT,wBAAS;wBAAd,CAAC;wBACH,YAAY,GAAG,CAAC,CAAC;wBACjB,gBAAgB,GAAG,CAAC,CAAC;wBACP,qBAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC;;wBAAlE,SAAS,GAAG,SAAsD;8BACjD,EAAT,uBAAS;;;6BAAT,wBAAS;wBAAf,EAAE;wBACR,YAAY,EAAE,CAAC;wBACE,qBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,CAAC,QAAQ,EAAE,EAAE,EAAE,CAAC;;wBAA1D,QAAQ,GAAG,SAA+C;wBAChE,WAA0B,EAAR,qBAAQ,EAAR,sBAAQ,EAAR,IAAQ,EAAC;4BAAjB,IAAI;4BACZ,IAAG,CAAC,IAAI,CAAC,IAAI,EAAC;gCACV,IAAG,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE,EAAE,IAAI,CAAC,EAAC;oCAClC,gBAAgB,EAAE,CAAC;iCACpB;6BACJ;yBACF;;;wBATW,IAAS;;;wBAWvB,aAAa,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,CAAC,EAAE,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,gBAAgB,EAAC,CAAC,CAAC;;;wBAftE,IAAS;;;wBAiBtB,YAAY;wBACZ,IAAI,CAAC,KAAK,GAAG,aAAa,CAAC;wBAC3B,4CAA4C;wBAC5C,4BAA4B;wBAC5B,+CAA+C;wBAE/C,wCAAwC;wBACxC,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;wBAC1B,SAAI;wBAAmB,qBAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,EAAE,EAAE,KAAK,CAAC;;wBAA9D,GAAK,eAAe,GAAG,SAAuC,CAAC;;;;;;KAGlE;IAED,sBAAI,oCAAU;aAAd;YACE,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QAC9B,CAAC;;;OAAA;IAED,sBAAI,uCAAa;aAAjB;YACE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QAC/B,CAAC;;;OAAA;IAED,gCAAS,GAAT;QACE,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;IACrC,CAAC;IAEK,uCAAgB,GAAtB,UAAuB,IAAS;;;;;4BACd,qBAAM,IAAI,CAAC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;;wBAAnE,OAAO,GAAG,SAAyD;wBACzE,IAAI,CAAC,GAAG,CAAC,wBAAwB,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;;;;;KACxD;IAED,wCAAiB,GAAjB,UAAkB,IAAI;IAEtB,CAAC;IA/DU,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,cAAc;YACxB,8GAAmC;;SAEpC,CAAC;+EAMyB,mFAAgB,EAAgB,+EAAc,EAAoB,iFAAe;OAL/F,YAAY,CAgExB;IAAD,mBAAC;CAAA;AAhEwB","file":"pages-teams-teamlist-teamlist-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { TeamlistPage } from './teamlist.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: TeamlistPage\n  }\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RouterModule.forChild(routes)\n  ],\n  declarations: [TeamlistPage]\n})\nexport class TeamlistPageModule {}\n","module.exports = \"<ion-header>\\n<ion-toolbar color=\\\"primary\\\">\\n  <ion-title>Deine Teams</ion-title>\\n\\n  <ion-buttons slot=\\\"end\\\">\\n    <ion-button (click)=\\\"nav.goBack()\\\">\\n      <ion-icon slot=\\\"icon-only\\\" name=\\\"arrow-round-back\\\"></ion-icon>\\n    </ion-button>\\n  </ion-buttons>\\n</ion-toolbar>\\n</ion-header>\\n  \\n<ion-content>\\n  <div *ngIf='isLoggedIn'>\\n    <div *ngIf='invitationTeams !== undefined && teams !== undefined'>\\n      <ion-card *ngIf='invitationTeams.length > 0'>\\n        <ion-card-header color='light'>\\n          <ion-card-title>Ausstehende Team-Einladungen:</ion-card-title>\\n          <ion-label>\\n            Annahmen mit: <ion-icon name=\\\"person-add\\\" slot='icon-only'></ion-icon> //\\n            Ablehnen mit: <ion-icon slot='icon-only' name=\\\"trash\\\"></ion-icon>\\n            <p>(Ablehnen wurde f√ºr die Umfrage deaktiviert)</p>\\n          </ion-label>\\n        </ion-card-header>\\n        <ion-card-content>\\n          <ion-list *ngFor='let invteam of invitationTeams'>\\n            <ion-item>\\n                <ion-button (click)=\\\"acceptInvitation(invteam)\\\" color=\\\"secondary\\\"><ion-icon name=\\\"person-add\\\" slot='icon-only'></ion-icon></ion-button>\\n                <ion-button (click)=\\\"declineInvitation(invteam)\\\" color=\\\"secondary\\\" disabled><ion-icon slot='icon-only' name=\\\"trash\\\"></ion-icon></ion-button>\\n                {{invteam.name}}\\n            </ion-item>\\n          </ion-list>\\n\\n        </ion-card-content>\\n      </ion-card>\\n\\n      <ion-card *ngIf='teams.length > 0'>\\n        <ion-card-content>\\n          <ion-list *ngFor=\\\"let team of teams\\\">\\n            <ion-item (click)=\\\"nav.navigateForwardParameter('viewteam', team.team)\\\" detail>\\n              <ion-label>\\n                {{team.team.name}} (<ion-icon name=\\\"calendar\\\"></ion-icon> {{team.events}} Events)\\n                <p *ngIf='team.tasksTODO > 0'>\\n                  <ion-icon name=\\\"checkmark\\\" color='danger'></ion-icon> {{team.tasksTODO}} dringende Tasks\\n                </p>\\n            </ion-label>\\n            </ion-item>\\n          </ion-list>\\n        </ion-card-content>\\n      </ion-card>\\n\\n      <ion-card *ngIf='teams.length == 0'>\\n        <ion-card-header>\\n          <ion-card-title>Du hast aktuell noch keine Teams</ion-card-title>\\n        </ion-card-header>\\n      </ion-card>\\n\\n      <ion-card *ngIf='invitationTeams.length == 0'>\\n          <ion-card-header color='light'>\\n            <ion-card-title>Ausstehende Team-Einladungen:</ion-card-title>\\n          </ion-card-header>\\n          <ion-card-content>\\n            <ion-label>Aktuell keine!</ion-label>\\n          </ion-card-content>\\n        </ion-card>\\n    </div>\\n  </div>\\n\\n  <ion-card *ngIf=\\\"isNotLoggedIn\\\">\\n    <ion-card-header>\\n      <ion-card-title>\\n        Du bist nicht eingeloggt!\\n      </ion-card-title>\\n    </ion-card-header>\\n    <ion-card-content>\\n      <ion-button (click)=\\\"openLogin()\\\" expand='block' color='secondary'>\\n        <ion-icon name=\\\"home\\\"></ion-icon> Zum Login\\n      </ion-button>\\n    </ion-card-content>\\n  </ion-card>\\n</ion-content>\\n\\n<ion-footer *ngIf=\\\"isLoggedIn\\\">\\n  <ion-toolbar color=\\\"secondary\\\">\\n    <div (click)=\\\"nav.navigateForward('createteam')\\\" color='secondary' text-center>\\n        <ion-icon name=\\\"contacts\\\"></ion-icon><ion-icon name=\\\"add\\\"></ion-icon> Team erstellen\\n    </div>\\n  </ion-toolbar>\\n</ion-footer>\"","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RlYW1zL3RlYW1saXN0L3RlYW1saXN0LnBhZ2Uuc2NzcyJ9 */\"","import { Component, OnInit } from '@angular/core';\nimport { NavigatorService } from 'src/app/services/navigator.service';\nimport { BackendService } from 'src/app/services/backend.service';\nimport { ReminderService } from 'src/app/services/reminder.service';\n\n@Component({\n  selector: 'app-teamlist',\n  templateUrl: './teamlist.page.html',\n  styleUrls: ['./teamlist.page.scss'],\n})\nexport class TeamlistPage implements OnInit {\n\n  teams: any = [];\n  invitationTeams: any = [];\n\n  constructor(private nav: NavigatorService, private back: BackendService, private reminder: ReminderService) {}\n\n  async ngOnInit() {\n  }\n\n  async ionViewWillEnter(){\n    if(this.isLoggedIn){\n      const onlyTeams = await this.back.getTeams('', '', true);\n      let unsortedTeams = [];\n      for(let t of onlyTeams){\n        let eventslength = 0;\n        let activeTaskLength = 0;\n        const allEvents = await this.back.getEvents(t._id.toString(), '', false);\n        for(let ev of allEvents){\n          eventslength++;\n          const allTasks = await this.back.getTasks(ev._id.toString(), '');\n          for(const task of allTasks){\n            if(!task.done){  \n                if(this.reminder.isActive(ev, task)){\n                  activeTaskLength++;\n                }\n            }\n          }\n        }\n        unsortedTeams.push({team: t, events: eventslength, tasksTODO: activeTaskLength});\n      }\n      //Sort Teams\n      this.teams = unsortedTeams;\n      //TODO: First all Teams, with dringend Tasks\n      //TODO: Then all other Teams\n      //TODO: Both Lists sorted itself alphabetically\n\n      //console.log('My Teams: ', this.teams);\n      this.invitationTeams = [];\n      this.invitationTeams = await this.back.getTeams('', '', false);\n      //console.log('Invited Teams: ', this.invitationTeams);\n    }\n  }\n  \n  get isLoggedIn(){\n    return this.back.isLoggedIn;\n  }\n\n  get isNotLoggedIn(){\n    return !this.back.isLoggedIn;\n  }\n\n  openLogin(){\n    this.nav.navigateLogin('teamlist');\n  }\n\n  async acceptInvitation(team: any){\n    const newTeam = await this.back.acceptTeaminvitation(team._id.toString());\n    this.nav.navigateForwardParameter('viewteam', newTeam);\n  }\n\n  declineInvitation(team){\n\n  }\n}\n"],"sourceRoot":""}